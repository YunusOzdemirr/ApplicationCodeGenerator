using AutoMapper;
using MediatR;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using IResult = Beryque.Domain.Common.IResult;

namespace Beryque.API.Controllers;

[Route("api/[controller]")]
[ApiController]
public class {EntityName}Controller : Controller
{
    private IMediator _mediator;
    private readonly IMapper _mapper;

    public {EntityNames}Controller(IMediator mediator, IMapper mapper)
    {
        _mediator = mediator;
        _mapper = mapper;
    }

    [HttpGet("{id}")]
    [ProducesResponseType(typeof(IResult<{EntityName}>), StatusCodes.Status200OK)]
    [ProducesResponseType(typeof(IResult), StatusCodes.Status400BadRequest)]
    public async Task<IActionResult> Get(int id)
    {
        var query = new Get{EntityName}Query() { Id = id };

        var result = await _mediator.Send(query);
        if (result.Succeeded && result.Data != null)
            return Ok(result);
        if (result.Data == null)
            return NotFound();
        return BadRequest();
    }

    [HttpGet("{isActive}")]
    [ProducesResponseType(typeof(IResult<List<{EntityName}>>), StatusCodes.Status200OK)]
    [ProducesResponseType(typeof(IResult), StatusCodes.Status400BadRequest)]
    public async Task<IActionResult> GetAll(bool? isActive)
    {
        var query = new GetAll{EntityNames}Query() { IsActive = isActive };
        var result = await _mediator.Send(query);
        if (result.Succeeded && result.Data != null)
            return Ok(result);
        if (result.Data == null)
            return NotFound();
        return BadRequest();
    }

    [HttpPost]
    [ProducesResponseType(typeof(IResult<int>), StatusCodes.Status200OK)]
    [ProducesResponseType(typeof(IResult), StatusCodes.Status400BadRequest)]
    public async Task<IActionResult> Create([FromForm] Create{EntityName}Request request)
    {
        var command = _mapper.Map<Create{EntityName}Command>(request);
        var result = await _mediator.Send(command);
        if (result.Succeeded)
            return Ok(result);
        return BadRequest();
    }


    [HttpPut]
    [ProducesResponseType(typeof(IResult), StatusCodes.Status200OK)]
    [ProducesResponseType(typeof(IResult), StatusCodes.Status400BadRequest)]
    public async Task<IActionResult> Update([FromBody] Update{EntityName}Request request)
    {
        var command = _mapper.Map<Update{EntityName}Command>(request);
        var result = await _mediator.Send(command);
        if (result.Succeeded && result.Data != null)
            return Ok(result);
        return BadRequest();
    }

    [HttpPut("{id}/{type}")]
    [ProducesResponseType(typeof(IResult), StatusCodes.Status200OK)]
    [ProducesResponseType(typeof(IResult), StatusCodes.Status400BadRequest)]
    public async Task<IActionResult> AddCount(int id, CountType type)
    {
        var command = new AddCount{EntityName}Command() { Id = id, CountType = type };
        var result = await _mediator.Send(command);
        if (result.Succeeded)
            return Ok(result);
        return BadRequest();
    }

    [HttpPut("ChangeStatus")]
    [ProducesResponseType(typeof(IResult), StatusCodes.Status200OK)]
    [ProducesResponseType(typeof(IResult), StatusCodes.Status400BadRequest)]
    public async Task<IActionResult> ChangeStatus(ChangeStatus{EntityName}Command command)
    {
        var result = await _mediator.Send(command);
        if (result.Succeeded)
            return Ok(result);
        return BadRequest(result);
    }

    [HttpDelete]
    [ProducesResponseType(typeof(IResult), StatusCodes.Status200OK)]
    [ProducesResponseType(typeof(IResult), StatusCodes.Status400BadRequest)]
    public async Task<IActionResult> Delete(int id)
    {
        var command = new Delete{EntityName}Command() { Id = id };
        var result = await _mediator.Send(command);
        if (result.Succeeded)
            return Ok(result);
        return BadRequest();
    }
}